/*
 *  cool.cup
 *              Parser definition for the COOL language.
 *
 */

import java_cup.runtime.*;
import java.util.*;
import java_cup.*;

/* Stuff enclosed in {: :} is copied verbatim to the class containing
all parser actions.  All the extra variables/functions you want to use
in the semantic actions should go here.  Don't remove or modify anything
that was there initially.  */

action code {: 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }
:} 

/************************************************************************/
/*                DONT CHANGE ANYTHING IN THIS SECTION                  */

parser code {:
    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
    }

:}

/* Declare the terminals; a few have types for associated lexemes.  The
token ERROR is never used in the parser; thus, it is a parse error when
the lexer returns it.  */

terminal CLASS, ELSE, FI, IF, IN, INHERITS, LET, LET_STMT, LOOP, POOL, THEN, WHILE;
terminal CASE, ESAC, OF, DARROW, NEW, ISVOID;
terminal ASSIGN, NOT, LE, ERROR;
terminal PLUS, DIV, MINUS, MULT, EQ, LT, DOT, NEG, COMMA, SEMI, COLON;
terminal LPAREN, RPAREN, AT, LBRACE, RBRACE;
terminal AbstractSymbol STR_CONST, INT_CONST;
terminal Boolean BOOL_CONST;
terminal AbstractSymbol TYPEID, OBJECTID;

/*  DON'T CHANGE ANYTHING ABOVE THIS LINE, OR YOUR PARSER WONT WORK       */
/**************************************************************************/

   /* Complete the nonterminal list below, giving a type for the semantic
      value of each non terminal. (See the CUP documentation for details. */

nonterminal programc program;
nonterminal Classes class_list;
nonterminal class_c class;
nonterminal Feature feature;
nonterminal Features features;
nonterminal Expression expr;
nonterminal Expressions exprs;
nonterminal Expressions args;
nonterminal Expressions blockbody;
nonterminal Expression dispatch;
nonterminal formalc formal;
nonterminal Formals formals;
nonterminal block block;
nonterminal let let;
nonterminal let lethelper;
nonterminal branch branch;
nonterminal Cases branches;
nonterminal loop while_loop;
nonterminal Features dummy_feature_list;
 
 
/* Precedence declarations go here. */
precedence right ASSIGN;
precedence left NOT;
precedence nonassoc LE, LT, EQ;
precedence left PLUS, MINUS;
precedence left MULT, DIV;
precedence left ISVOID;
precedence left NEG;
precedence left AT;
precedence left DOT;


program	
	::= class_list:cl
	    {: RESULT = new programc(curr_lineno(), cl); :}
        ;

class_list
	/* single class */
	::= class:c
		{: RESULT = (new Classes(curr_lineno())).appendElement(c); :}
	/* several classes */
	| class_list:cl class:c
	    {: RESULT = cl.appendElement(c); :}
	| error class
		{: RESULT = new Classes(curr_lineno()); :}
	;

/* If no parent is specified, the class inherits from the Object class */
class
	::= CLASS TYPEID:n LBRACE features:f RBRACE SEMI
	    {:  RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); :}
	| CLASS TYPEID:n INHERITS TYPEID:p LBRACE features:f RBRACE SEMI
	    {: RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); :}
	;


args 
	::= expr:e 
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| args:arg COMMA expr:e
		{: RESULT = arg.appendElement(e); :}
	| /*Empty*/
		{: RESULT = new Expressions(curr_lineno()); :}
	;
	
dispatch
	/*<expr>.<id>(<expr>,..., <expr>)*/
	::= expr:e DOT OBJECTID:id LPAREN args:arg RPAREN
		{: RESULT = new dispatch(curr_lineno(), e, id, arg); :}
	/*<id>(<expr>,..., <expr>)*/
	| OBJECTID:id LPAREN args:arg RPAREN
		{: RESULT = new dispatch(curr_lineno(),new object(curr_lineno(), TreeConstants.self), id, arg); :}
	/*<expr>@<type>.<id>(<expr>,..., <expr>)*/
	| expr:e AT TYPEID:type DOT OBJECTID:id LPAREN args:arg RPAREN
		/*TODO*/
		{: RESULT = new static_dispatch(curr_lineno(), e, type, id, arg); :}
	;

lethelper 
	/* The last let's */
	::= OBJECTID:name COLON TYPEID:type ASSIGN expr:init IN expr:body 
	{: RESULT = new let(curr_lineno(), name, type, init, body); :}
	| OBJECTID:name COLON TYPEID:type IN expr:body 
	{: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); :}
	
	/* In the middle let's */
	| OBJECTID:name COLON TYPEID:type ASSIGN expr:init COMMA lethelper:helper
	{: RESULT = new let(curr_lineno(), name, type, init, helper); :}
	| OBJECTID:name COLON TYPEID:type COMMA lethelper:helper
	{: RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), helper); :}
	;

let 
	::= LET lethelper:helper
		{: RESULT = helper; :}
	;
	
branch 
	::= OBJECTID:id COLON TYPEID:t DARROW expr:e SEMI
		{: RESULT = new branch(curr_lineno(), id, t, e); :}
	;
	
branches 
	::= branch:b
		{: RESULT = new Cases(curr_lineno()).appendElement(b); :}
	| branches:bs branch:b
		{: RESULT = bs.appendElement(b); :}
	;
	
while_loop 
	::= WHILE expr:pred LOOP expr:body POOL
		{: RESULT = new loop(curr_lineno(), pred, body); :}
		
	/* error productions */
	| WHILE expr:pred LOOP expr:body LOOP
		{: parser.syntax_error(new Symbol(TokenConstants.LOOP)); RESULT = new loop(curr_lineno(), pred, body); :}
		
	| WHILE expr:pred POOL expr:body POOL
		{: parser.syntax_error(new Symbol(TokenConstants.POOL)); RESULT = new loop(curr_lineno(), pred, body); :}	
		
	| WHILE expr:pred POOL expr:body LOOP
		{: parser.syntax_error(new Symbol(TokenConstants.POOL)); RESULT = new loop(curr_lineno(), pred, body); :}
	;
	
expr 
	::= OBJECTID:id ASSIGN expr:e
		{: RESULT = new assign(curr_lineno(), id, e); :}
		
	| INT_CONST:i
		{: RESULT = new int_const(curr_lineno(), i); :}
		
	| STR_CONST:s
		{: RESULT = new string_const(curr_lineno(), s); :}
		
	| BOOL_CONST:b
		{: RESULT = new bool_const(curr_lineno(), b); :}
		
	| OBJECTID:id
		{: RESULT = new object(curr_lineno(), id); :}
		
	| LPAREN expr:e RPAREN
		{: RESULT = e; :}
		
	| expr:e1 PLUS expr:e2
		{: RESULT = new plus(curr_lineno(), e1, e2); :}
		
	| expr:e1 MINUS expr:e2
		{: RESULT = new sub(curr_lineno(), e1, e2); :}
		
	| expr:e1 MULT expr:e2
		{: RESULT = new mul(curr_lineno(), e1, e2); :}
		
	| expr:e1 DIV expr:e2
		{: RESULT = new divide(curr_lineno(), e1, e2); :}
		
	| NEG expr:e
		{: RESULT = new neg(curr_lineno(), e); :}
		
	| expr:e1 LT expr:e2
		{: RESULT = new lt(curr_lineno(), e1, e2); :}
		
	| expr:e1 LE expr:e2
		{: RESULT = new leq(curr_lineno(), e1, e2); :}

	| expr:e1 EQ expr:e2
		{: RESULT = new eq(curr_lineno(), e1, e2); :}
	
	| NOT expr:e 
		{: RESULT = new comp(curr_lineno(), e); :}
		
	| IF expr:pred THEN expr:then_exp ELSE expr:else_exp FI	
		{: RESULT = new cond(curr_lineno(), pred, then_exp, else_exp); :}
	
	| CASE expr:e OF branches:cases ESAC
		{: RESULT = new typcase(curr_lineno(), e, cases); :}
	
	| NEW TYPEID:type 
		{: RESULT = new new_(curr_lineno(), type); :}
	
	| ISVOID expr:e
		{: RESULT = new isvoid(curr_lineno(), e);  :}
		
	| while_loop:w
		{: RESULT = w; :}
		
	| dispatch:d
		{: RESULT = d; :}
		
	| block:b	
		{: RESULT = b; :}
		
	| let:l 
		{: RESULT = l; :}
	| error:e	
		{: RESULT = new no_expr(curr_lineno()); :}
	;

exprs 
	::= expr:e
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}
	| exprs:es expr:e
		{: RESULT = es.appendElement(e); :}	
	;	
	
formal 
	::= OBJECTID:id COLON TYPEID:type
		{: RESULT = new formalc(curr_lineno(), id, type); :}
	;
	
formals 
	::= formal:f 
		{: RESULT = (new Formals(curr_lineno())).appendElement(f); :}
	| formals:fs COMMA formal:f
		{: RESULT = fs.appendElement(f); :}
	| {: RESULT = new Formals(curr_lineno()); :}	
	;

blockbody 
	::= expr:e SEMI
		{: RESULT = new Expressions(curr_lineno()).appendElement(e); :}	
	| blockbody:es expr:e SEMI
		{: RESULT = es.appendElement(e); :}
	;
	

block
	::= LBRACE blockbody:body RBRACE 
		{: RESULT = new block(curr_lineno(), body); :}
	;
	
feature 
	/*Method.*/
	::= OBJECTID:name LPAREN formals:f RPAREN COLON TYPEID:ret LBRACE expr:e RBRACE SEMI
		{: RESULT = new method(curr_lineno(), name, f, ret, e); :}
		
	/*Attribute declaration without initialization */	
	| OBJECTID:name COLON TYPEID:type SEMI
		{: RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); :}
	/*Attribute declaration with initialization */		
	| OBJECTID:name COLON TYPEID:type ASSIGN expr:e SEMI	
		{: RESULT = new attr(curr_lineno(), name, type, e); :}
	
	/* eRROR pRODUCTIONS */
	/* NO SEMI-COLON Attribute declaration without initialization */	
	| OBJECTID:name COLON TYPEID:type
		{: parser.syntax_error(new Symbol(TokenConstants.OBJECTID, name)); RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); :}
	/* NO SEMI-COLON Attribute declaration with initialization */		
	| OBJECTID:name COLON TYPEID:type ASSIGN expr:e	
		{:  parser.syntax_error(new Symbol(TokenConstants.OBJECTID, name)); RESULT = new attr(curr_lineno(), name, type, e); :}
	;
	
features 
	::= feature:f
		{: RESULT = new Features(curr_lineno()).appendElement(f); :}
	| features:fs feature:f
		{: RESULT = fs.appendElement(f); :}
	|/*Empty*/
	{: RESULT = new Features(curr_lineno()); :}
	| error SEMI
	{: RESULT = new Features(curr_lineno()); :}
	;

/* Feature list may be empty, but no empty features in list. */
dummy_feature_list
	::= /* empty */
	    {: RESULT = new Features(curr_lineno()); :}
	;
