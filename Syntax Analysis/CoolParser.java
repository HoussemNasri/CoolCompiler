
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Dec 30 01:56:48 WAT 2021
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java_cup.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Dec 30 01:56:48 WAT 2021
  */
public class CoolParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public CoolParser() {super();}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public CoolParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\104\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\004\000\002\004\010" +
    "\000\002\004\012\000\002\011\003\000\002\011\005\000" +
    "\002\011\002\000\002\013\010\000\002\013\006\000\002" +
    "\013\012\000\002\020\011\000\002\020\007\000\002\020" +
    "\011\000\002\020\007\000\002\017\004\000\002\021\010" +
    "\000\002\022\003\000\002\022\004\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\023\007\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\004\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\004\000\002\007\011\000\002\007" +
    "\007\000\002\007\004\000\002\007\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\003\000\002\010\004\000\002" +
    "\014\005\000\002\015\003\000\002\015\005\000\002\015" +
    "\002\000\002\012\004\000\002\012\005\000\002\016\005" +
    "\000\002\005\014\000\002\005\006\000\002\005\010\000" +
    "\002\005\005\000\002\005\007\000\002\006\003\000\002" +
    "\006\004\000\002\006\002\000\002\006\004\000\002\024" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\003\006\004\010\001\002\000\006\002" +
    "\001\004\010\001\002\000\004\002\231\001\002\000\004" +
    "\004\010\001\002\000\006\002\uffff\004\uffff\001\002\000" +
    "\004\055\011\001\002\000\006\011\013\050\012\001\002" +
    "\000\010\003\016\051\uffc0\056\021\001\002\000\004\055" +
    "\014\001\002\000\004\050\015\001\002\000\010\003\016" +
    "\051\uffc0\056\021\001\002\000\004\043\224\001\002\000" +
    "\006\051\uffc2\056\uffc2\001\002\000\006\051\222\056\021" +
    "\001\002\000\006\044\022\045\023\001\002\000\004\055" +
    "\214\001\002\000\010\042\uffcb\046\uffcb\056\024\001\002" +
    "\000\004\044\212\001\002\000\006\042\uffcd\046\uffcd\001" +
    "\002\000\006\042\027\046\030\001\002\000\004\056\024" +
    "\001\002\000\004\044\031\001\002\000\004\055\032\001" +
    "\002\000\004\050\033\001\002\000\040\003\053\007\042" +
    "\012\054\017\037\020\052\024\055\025\056\027\040\041" +
    "\035\045\044\050\046\052\043\053\047\054\041\056\050" +
    "\001\002\000\054\005\uffd5\006\uffd5\010\uffd5\014\uffd5\015" +
    "\uffd5\016\uffd5\022\uffd5\030\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\046" +
    "\uffd5\047\uffd5\051\uffd5\056\uffd5\001\002\000\040\003\053" +
    "\007\042\012\054\017\037\020\052\024\055\025\056\027" +
    "\040\041\035\045\044\050\046\052\043\053\047\054\041" +
    "\056\050\001\002\000\026\030\065\032\063\033\067\034" +
    "\061\035\062\036\064\037\071\040\066\047\070\051\206" +
    "\001\002\000\040\003\053\007\042\012\054\017\037\020" +
    "\052\024\055\025\056\027\040\041\035\045\044\050\046" +
    "\052\043\053\047\054\041\056\050\001\002\000\040\003" +
    "\053\007\042\012\054\017\037\020\052\024\055\025\056" +
    "\027\040\041\035\045\044\050\046\052\043\053\047\054" +
    "\041\056\050\001\002\000\054\005\uffe5\006\uffe5\010\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\022\uffe5\030\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\042\uffe5" +
    "\043\uffe5\046\uffe5\047\uffe5\051\uffe5\056\uffe5\001\002\000" +
    "\040\003\053\007\042\012\054\017\037\020\052\024\055" +
    "\025\056\027\040\041\035\045\044\050\046\052\043\053" +
    "\047\054\041\056\050\001\002\000\054\005\uffe6\006\uffe6" +
    "\010\uffe6\014\uffe6\015\uffe6\016\uffe6\022\uffe6\030\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6\040\uffe6" +
    "\042\uffe6\043\uffe6\046\uffe6\047\uffe6\051\uffe6\056\uffe6\001" +
    "\002\000\040\003\053\007\042\012\054\017\037\020\052" +
    "\024\055\025\056\027\040\041\035\045\044\050\046\052" +
    "\043\053\047\054\041\056\050\001\002\000\054\005\uffd3" +
    "\006\uffd3\010\uffd3\014\uffd3\015\uffd3\016\uffd3\022\uffd3\030" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3" +
    "\040\uffd3\042\uffd3\043\uffd3\046\uffd3\047\uffd3\051\uffd3\056" +
    "\uffd3\001\002\000\040\003\053\007\042\012\054\017\037" +
    "\020\052\024\055\025\056\027\040\041\035\045\044\050" +
    "\046\052\043\053\047\054\041\056\050\001\002\000\054" +
    "\005\uffe7\006\uffe7\010\uffe7\014\uffe7\015\uffe7\016\uffe7\022" +
    "\uffe7\030\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7" +
    "\037\uffe7\040\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\051" +
    "\uffe7\056\uffe7\001\002\000\060\005\uffe4\006\uffe4\010\uffe4" +
    "\014\uffe4\015\uffe4\016\uffe4\022\uffe4\026\152\030\uffe4\032" +
    "\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037\uffe4\040\uffe4" +
    "\042\uffe4\043\uffe4\045\151\046\uffe4\047\uffe4\051\uffe4\056" +
    "\uffe4\001\002\000\054\005\uffd2\006\uffd2\010\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\022\uffd2\030\uffd2\032\uffd2\033\uffd2\034" +
    "\uffd2\035\uffd2\036\uffd2\037\uffd2\040\uffd2\042\uffd2\043\uffd2" +
    "\046\uffd2\047\uffd2\051\uffd2\056\uffd2\001\002\000\040\003" +
    "\053\007\042\012\054\017\037\020\052\024\055\025\056" +
    "\027\040\041\035\045\044\050\046\052\043\053\047\054" +
    "\041\056\050\001\002\000\054\005\uffd1\006\uffd1\010\uffd1" +
    "\014\uffd1\015\uffd1\016\uffd1\022\uffd1\030\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042\uffd1" +
    "\043\uffd1\046\uffd1\047\uffd1\051\uffd1\056\uffd1\001\002\000" +
    "\004\056\120\001\002\000\004\055\116\001\002\000\040" +
    "\003\053\007\042\012\054\017\037\020\052\024\055\025" +
    "\056\027\040\041\035\045\044\050\046\052\043\053\047" +
    "\054\041\056\050\001\002\000\054\005\uffd4\006\uffd4\010" +
    "\uffd4\014\uffd4\015\uffd4\016\uffd4\022\uffd4\030\uffd4\032\uffd4" +
    "\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042" +
    "\uffd4\043\uffd4\046\uffd4\047\uffd4\051\uffd4\056\uffd4\001\002" +
    "\000\054\005\uffd6\006\uffd6\010\uffd6\014\uffd6\015\uffd6\016" +
    "\uffd6\022\uffd6\030\uffd6\032\uffd6\033\uffd6\034\uffd6\035\uffd6" +
    "\036\uffd6\037\uffd6\040\066\042\uffd6\043\uffd6\046\uffd6\047" +
    "\070\051\uffd6\056\uffd6\001\002\000\040\003\053\007\042" +
    "\012\054\017\037\020\052\024\055\025\056\027\040\041" +
    "\035\045\044\050\046\052\043\053\047\054\041\056\050" +
    "\001\002\000\040\003\053\007\042\012\054\017\037\020" +
    "\052\024\055\025\056\027\040\041\035\045\044\050\046" +
    "\052\043\053\047\054\041\056\050\001\002\000\040\003" +
    "\053\007\042\012\054\017\037\020\052\024\055\025\056" +
    "\027\040\041\035\045\044\050\046\052\043\053\047\054" +
    "\041\056\050\001\002\000\040\003\053\007\042\012\054" +
    "\017\037\020\052\024\055\025\056\027\040\041\035\045" +
    "\044\050\046\052\043\053\047\054\041\056\050\001\002" +
    "\000\040\003\053\007\042\012\054\017\037\020\052\024" +
    "\055\025\056\027\040\041\035\045\044\050\046\052\043" +
    "\053\047\054\041\056\050\001\002\000\004\056\105\001" +
    "\002\000\040\003\053\007\042\012\054\017\037\020\052" +
    "\024\055\025\056\027\040\041\035\045\044\050\046\052" +
    "\043\053\047\054\041\056\050\001\002\000\004\055\073" +
    "\001\002\000\040\003\053\007\042\012\054\017\037\020" +
    "\052\024\055\025\056\027\040\041\035\045\044\050\046" +
    "\052\043\053\047\054\041\056\050\001\002\000\046\005" +
    "\uffdd\006\uffdd\010\uffdd\014\uffdd\015\uffdd\016\uffdd\022\uffdd" +
    "\032\063\033\067\034\061\035\062\040\066\042\uffdd\043" +
    "\uffdd\046\uffdd\047\070\051\uffdd\056\uffdd\001\002\000\004" +
    "\040\074\001\002\000\004\056\075\001\002\000\004\045" +
    "\076\001\002\000\044\003\053\007\042\012\054\017\037" +
    "\020\052\024\055\025\056\027\040\041\035\042\ufff8\045" +
    "\044\046\ufff8\050\046\052\043\053\047\054\041\056\050" +
    "\001\002\000\030\030\065\032\063\033\067\034\061\035" +
    "\062\036\064\037\071\040\066\042\ufffa\046\ufffa\047\070" +
    "\001\002\000\006\042\101\046\102\001\002\000\040\003" +
    "\053\007\042\012\054\017\037\020\052\024\055\025\056" +
    "\027\040\041\035\045\044\050\046\052\043\053\047\054" +
    "\041\056\050\001\002\000\054\005\ufff5\006\ufff5\010\ufff5" +
    "\014\ufff5\015\ufff5\016\ufff5\022\ufff5\030\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\042\ufff5" +
    "\043\ufff5\046\ufff5\047\ufff5\051\ufff5\056\ufff5\001\002\000" +
    "\030\030\065\032\063\033\067\034\061\035\062\036\064" +
    "\037\071\040\066\042\ufff9\046\ufff9\047\070\001\002\000" +
    "\054\005\uffdf\006\uffdf\010\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\022\uffdf\030\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\036" +
    "\uffdf\037\uffdf\040\066\042\uffdf\043\uffdf\046\uffdf\047\070" +
    "\051\uffdf\056\uffdf\001\002\000\004\045\106\001\002\000" +
    "\044\003\053\007\042\012\054\017\037\020\052\024\055" +
    "\025\056\027\040\041\035\042\ufff8\045\044\046\ufff8\050" +
    "\046\052\043\053\047\054\041\056\050\001\002\000\006" +
    "\042\101\046\110\001\002\000\054\005\ufff7\006\ufff7\010" +
    "\ufff7\014\ufff7\015\ufff7\016\ufff7\022\ufff7\030\ufff7\032\ufff7" +
    "\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7\040\ufff7\042" +
    "\ufff7\043\ufff7\046\ufff7\047\ufff7\051\ufff7\056\ufff7\001\002" +
    "\000\046\005\uffdc\006\uffdc\010\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\022\uffdc\032\063\033\067\034\061\035\062\040\066" +
    "\042\uffdc\043\uffdc\046\uffdc\047\070\051\uffdc\056\uffdc\001" +
    "\002\000\046\005\uffdb\006\uffdb\010\uffdb\014\uffdb\015\uffdb" +
    "\016\uffdb\022\uffdb\032\063\033\067\034\061\035\062\040" +
    "\066\042\uffdb\043\uffdb\046\uffdb\047\070\051\uffdb\056\uffdb" +
    "\001\002\000\054\005\uffe2\006\uffe2\010\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\022\uffe2\030\uffe2\032\uffe2\033\067\034\uffe2" +
    "\035\062\036\uffe2\037\uffe2\040\066\042\uffe2\043\uffe2\046" +
    "\uffe2\047\070\051\uffe2\056\uffe2\001\002\000\054\005\uffe0" +
    "\006\uffe0\010\uffe0\014\uffe0\015\uffe0\016\uffe0\022\uffe0\030" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\066\042\uffe0\043\uffe0\046\uffe0\047\070\051\uffe0\056" +
    "\uffe0\001\002\000\054\005\uffe1\006\uffe1\010\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\022\uffe1\030\uffe1\032\uffe1\033\067\034" +
    "\uffe1\035\062\036\uffe1\037\uffe1\040\066\042\uffe1\043\uffe1" +
    "\046\uffe1\047\070\051\uffe1\056\uffe1\001\002\000\054\005" +
    "\uffd7\006\uffd7\010\uffd7\014\uffd7\015\uffd7\016\uffd7\022\uffd7" +
    "\030\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7\036\uffd7\037" +
    "\uffd7\040\uffd7\042\uffd7\043\uffd7\046\uffd7\047\uffd7\051\uffd7" +
    "\056\uffd7\001\002\000\054\005\ufff0\006\ufff0\010\ufff0\014" +
    "\ufff0\015\ufff0\016\ufff0\022\ufff0\030\ufff0\032\ufff0\033\ufff0" +
    "\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040\ufff0\042\ufff0\043" +
    "\ufff0\046\ufff0\047\ufff0\051\ufff0\056\ufff0\001\002\000\004" +
    "\044\121\001\002\000\004\055\122\001\002\000\010\010" +
    "\124\026\125\042\123\001\002\000\004\056\120\001\002" +
    "\000\040\003\053\007\042\012\054\017\037\020\052\024" +
    "\055\025\056\027\040\041\035\045\044\050\046\052\043" +
    "\053\047\054\041\056\050\001\002\000\040\003\053\007" +
    "\042\012\054\017\037\020\052\024\055\025\056\027\040" +
    "\041\035\045\044\050\046\052\043\053\047\054\041\056" +
    "\050\001\002\000\030\010\127\030\065\032\063\033\067" +
    "\034\061\035\062\036\064\037\071\040\066\042\130\047" +
    "\070\001\002\000\040\003\053\007\042\012\054\017\037" +
    "\020\052\024\055\025\056\027\040\041\035\045\044\050" +
    "\046\052\043\053\047\054\041\056\050\001\002\000\004" +
    "\056\120\001\002\000\054\005\ufff2\006\ufff2\010\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\022\ufff2\030\ufff2\032\ufff2\033\ufff2" +
    "\034\ufff2\035\ufff2\036\ufff2\037\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\046\ufff2\047\ufff2\051\ufff2\056\ufff2\001\002\000\054" +
    "\005\ufff4\006\ufff4\010\ufff4\014\ufff4\015\ufff4\016\ufff4\022" +
    "\ufff4\030\065\032\063\033\067\034\061\035\062\036\064" +
    "\037\071\040\066\042\ufff4\043\ufff4\046\ufff4\047\070\051" +
    "\ufff4\056\ufff4\001\002\000\054\005\ufff3\006\ufff3\010\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\022\ufff3\030\065\032\063\033" +
    "\067\034\061\035\062\036\064\037\071\040\066\042\ufff3" +
    "\043\ufff3\046\ufff3\047\070\051\ufff3\056\ufff3\001\002\000" +
    "\054\005\ufff1\006\ufff1\010\ufff1\014\ufff1\015\ufff1\016\ufff1" +
    "\022\ufff1\030\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036" +
    "\ufff1\037\ufff1\040\ufff1\042\ufff1\043\ufff1\046\ufff1\047\ufff1" +
    "\051\ufff1\056\ufff1\001\002\000\026\022\136\030\065\032" +
    "\063\033\067\034\061\035\062\036\064\037\071\040\066" +
    "\047\070\001\002\000\004\056\140\001\002\000\006\021" +
    "\150\056\140\001\002\000\004\044\142\001\002\000\006" +
    "\021\uffee\056\uffee\001\002\000\004\055\143\001\002\000" +
    "\004\023\144\001\002\000\040\003\053\007\042\012\054" +
    "\017\037\020\052\024\055\025\056\027\040\041\035\045" +
    "\044\050\046\052\043\053\047\054\041\056\050\001\002" +
    "\000\026\030\065\032\063\033\067\034\061\035\062\036" +
    "\064\037\071\040\066\043\146\047\070\001\002\000\006" +
    "\021\uffef\056\uffef\001\002\000\006\021\uffed\056\uffed\001" +
    "\002\000\054\005\uffd8\006\uffd8\010\uffd8\014\uffd8\015\uffd8" +
    "\016\uffd8\022\uffd8\030\uffd8\032\uffd8\033\uffd8\034\uffd8\035" +
    "\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8\043\uffd8\046\uffd8" +
    "\047\uffd8\051\uffd8\056\uffd8\001\002\000\044\003\053\007" +
    "\042\012\054\017\037\020\052\024\055\025\056\027\040" +
    "\041\035\042\ufff8\045\044\046\ufff8\050\046\052\043\053" +
    "\047\054\041\056\050\001\002\000\040\003\053\007\042" +
    "\012\054\017\037\020\052\024\055\025\056\027\040\041" +
    "\035\045\044\050\046\052\043\053\047\054\041\056\050" +
    "\001\002\000\054\005\uffe8\006\uffe8\010\uffe8\014\uffe8\015" +
    "\uffe8\016\uffe8\022\uffe8\030\065\032\063\033\067\034\061" +
    "\035\062\036\064\037\071\040\066\042\uffe8\043\uffe8\046" +
    "\uffe8\047\070\051\uffe8\056\uffe8\001\002\000\006\042\101" +
    "\046\155\001\002\000\054\005\ufff6\006\ufff6\010\ufff6\014" +
    "\ufff6\015\ufff6\016\ufff6\022\ufff6\030\ufff6\032\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\042\ufff6\043" +
    "\ufff6\046\ufff6\047\ufff6\051\ufff6\056\ufff6\001\002\000\026" +
    "\030\065\032\063\033\067\034\061\035\062\036\064\037" +
    "\071\040\066\043\163\047\070\001\002\000\042\003\053" +
    "\007\042\012\054\017\037\020\052\024\055\025\056\027" +
    "\040\041\035\045\044\050\046\051\161\052\043\053\047" +
    "\054\041\056\050\001\002\000\026\030\065\032\063\033" +
    "\067\034\061\035\062\036\064\037\071\040\066\043\162" +
    "\047\070\001\002\000\054\005\uffc8\006\uffc8\010\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\022\uffc8\030\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\042\uffc8\043" +
    "\uffc8\046\uffc8\047\uffc8\051\uffc8\056\uffc8\001\002\000\042" +
    "\003\uffc9\007\uffc9\012\uffc9\017\uffc9\020\uffc9\024\uffc9\025" +
    "\uffc9\027\uffc9\041\uffc9\045\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\053\uffc9\054\uffc9\056\uffc9\001\002\000\042\003\uffca\007" +
    "\uffca\012\uffca\017\uffca\020\uffca\024\uffca\025\uffca\027\uffca" +
    "\041\uffca\045\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054" +
    "\uffca\056\uffca\001\002\000\026\030\065\032\063\033\067" +
    "\034\061\035\062\036\064\037\071\040\066\046\165\047" +
    "\070\001\002\000\054\005\uffe3\006\uffe3\010\uffe3\014\uffe3" +
    "\015\uffe3\016\uffe3\022\uffe3\030\uffe3\032\uffe3\033\uffe3\034" +
    "\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\042\uffe3\043\uffe3" +
    "\046\uffe3\047\uffe3\051\uffe3\056\uffe3\001\002\000\026\016" +
    "\167\030\065\032\063\033\067\034\061\035\062\036\064" +
    "\037\071\040\066\047\070\001\002\000\040\003\053\007" +
    "\042\012\054\017\037\020\052\024\055\025\056\027\040" +
    "\041\035\045\044\050\046\052\043\053\047\054\041\056" +
    "\050\001\002\000\026\005\171\030\065\032\063\033\067" +
    "\034\061\035\062\036\064\037\071\040\066\047\070\001" +
    "\002\000\040\003\053\007\042\012\054\017\037\020\052" +
    "\024\055\025\056\027\040\041\035\045\044\050\046\052" +
    "\043\053\047\054\041\056\050\001\002\000\026\006\173" +
    "\030\065\032\063\033\067\034\061\035\062\036\064\037" +
    "\071\040\066\047\070\001\002\000\054\005\uffd9\006\uffd9" +
    "\010\uffd9\014\uffd9\015\uffd9\016\uffd9\022\uffd9\030\uffd9\032" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\042\uffd9\043\uffd9\046\uffd9\047\uffd9\051\uffd9\056\uffd9\001" +
    "\002\000\054\005\uffda\006\uffda\010\uffda\014\uffda\015\uffda" +
    "\016\uffda\022\uffda\030\065\032\063\033\067\034\061\035" +
    "\062\036\064\037\071\040\066\042\uffda\043\uffda\046\uffda" +
    "\047\070\051\uffda\056\uffda\001\002\000\030\014\176\015" +
    "\177\030\065\032\063\033\067\034\061\035\062\036\064" +
    "\037\071\040\066\047\070\001\002\000\040\003\053\007" +
    "\042\012\054\017\037\020\052\024\055\025\056\027\040" +
    "\041\035\045\044\050\046\052\043\053\047\054\041\056" +
    "\050\001\002\000\040\003\053\007\042\012\054\017\037" +
    "\020\052\024\055\025\056\027\040\041\035\045\044\050" +
    "\046\052\043\053\047\054\041\056\050\001\002\000\030" +
    "\014\201\015\202\030\065\032\063\033\067\034\061\035" +
    "\062\036\064\037\071\040\066\047\070\001\002\000\054" +
    "\005\uffe9\006\uffe9\010\uffe9\014\uffe9\015\uffe9\016\uffe9\022" +
    "\uffe9\030\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036\uffe9" +
    "\037\uffe9\040\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\051" +
    "\uffe9\056\uffe9\001\002\000\054\005\uffea\006\uffea\010\uffea" +
    "\014\uffea\015\uffea\016\uffea\022\uffea\030\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\042\uffea" +
    "\043\uffea\046\uffea\047\uffea\051\uffea\056\uffea\001\002\000" +
    "\030\014\204\015\205\030\065\032\063\033\067\034\061" +
    "\035\062\036\064\037\071\040\066\047\070\001\002\000" +
    "\054\005\uffeb\006\uffeb\010\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\022\uffeb\030\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\036" +
    "\uffeb\037\uffeb\040\uffeb\042\uffeb\043\uffeb\046\uffeb\047\uffeb" +
    "\051\uffeb\056\uffeb\001\002\000\054\005\uffec\006\uffec\010" +
    "\uffec\014\uffec\015\uffec\016\uffec\022\uffec\030\uffec\032\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\042" +
    "\uffec\043\uffec\046\uffec\047\uffec\051\uffec\056\uffec\001\002" +
    "\000\004\043\207\001\002\000\006\051\uffc7\056\uffc7\001" +
    "\002\000\054\005\uffde\006\uffde\010\uffde\014\uffde\015\uffde" +
    "\016\uffde\022\uffde\030\uffde\032\uffde\033\uffde\034\uffde\035" +
    "\uffde\036\uffde\037\uffde\040\066\042\uffde\043\uffde\046\uffde" +
    "\047\070\051\uffde\056\uffde\001\002\000\006\042\uffcc\046" +
    "\uffcc\001\002\000\004\055\213\001\002\000\006\042\uffce" +
    "\046\uffce\001\002\000\012\026\216\043\215\051\uffc4\056" +
    "\uffc4\001\002\000\006\051\uffc6\056\uffc6\001\002\000\040" +
    "\003\053\007\042\012\054\017\037\020\052\024\055\025" +
    "\056\027\040\041\035\045\044\050\046\052\043\053\047" +
    "\054\041\056\050\001\002\000\032\030\065\032\063\033" +
    "\067\034\061\035\062\036\064\037\071\040\066\043\220" +
    "\047\070\051\uffc3\056\uffc3\001\002\000\006\051\uffc5\056" +
    "\uffc5\001\002\000\006\051\uffc1\056\uffc1\001\002\000\004" +
    "\043\223\001\002\000\006\002\ufffb\004\ufffb\001\002\000" +
    "\006\051\uffbf\056\uffbf\001\002\000\006\051\226\056\021" +
    "\001\002\000\004\043\227\001\002\000\006\002\ufffc\004" +
    "\ufffc\001\002\000\006\002\ufffd\004\ufffd\001\002\000\004" +
    "\002\000\001\002\000\006\002\ufffe\004\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\004\003\003\004\006\001\001\000" +
    "\004\004\231\001\001\000\002\001\001\000\004\004\227" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\016\006\224\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\016\006\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\024\015" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\035\013\056" +
    "\016\044\017\050\023\033\001\001\000\002\001\001\000" +
    "\014\007\207\013\056\016\044\017\050\023\033\001\001" +
    "\000\002\001\001\000\014\007\174\013\056\016\044\017" +
    "\050\023\033\001\001\000\014\007\173\013\056\016\044" +
    "\017\050\023\033\001\001\000\002\001\001\000\014\007" +
    "\165\013\056\016\044\017\050\023\033\001\001\000\002" +
    "\001\001\000\014\007\163\013\056\016\044\017\050\023" +
    "\033\001\001\000\002\001\001\000\016\007\155\012\156" +
    "\013\056\016\044\017\050\023\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\134" +
    "\013\056\016\044\017\050\023\033\001\001\000\002\001" +
    "\001\000\004\020\116\001\001\000\002\001\001\000\014" +
    "\007\057\013\056\016\044\017\050\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\114\013\056" +
    "\016\044\017\050\023\033\001\001\000\014\007\113\013" +
    "\056\016\044\017\050\023\033\001\001\000\014\007\112" +
    "\013\056\016\044\017\050\023\033\001\001\000\014\007" +
    "\111\013\056\016\044\017\050\023\033\001\001\000\014" +
    "\007\110\013\056\016\044\017\050\023\033\001\001\000" +
    "\002\001\001\000\014\007\103\013\056\016\044\017\050" +
    "\023\033\001\001\000\002\001\001\000\014\007\071\013" +
    "\056\016\044\017\050\023\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\076\011\077\013\056\016\044\017\050\023\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\102\013\056\016\044\017\050\023\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\007\076\011\106\013\056\016\044\017\050" +
    "\023\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\133\001\001\000\014\007\132\013\056\016" +
    "\044\017\050\023\033\001\001\000\014\007\125\013\056" +
    "\016\044\017\050\023\033\001\001\000\002\001\001\000" +
    "\014\007\131\013\056\016\044\017\050\023\033\001\001" +
    "\000\004\020\130\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\140\022\136\001\001\000\004\021\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\007\144\013\056\016\044\017" +
    "\050\023\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\076\011" +
    "\153\013\056\016\044\017\050\023\033\001\001\000\014" +
    "\007\152\013\056\016\044\017\050\023\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\157\013\056\016\044\017\050\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\007\167\013\056\016\044" +
    "\017\050\023\033\001\001\000\002\001\001\000\014\007" +
    "\171\013\056\016\044\017\050\023\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\202\013\056\016\044\017\050\023\033" +
    "\001\001\000\014\007\177\013\056\016\044\017\050\023" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\216\013\056" +
    "\016\044\017\050\023\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\220\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$CoolParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$CoolParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$CoolParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    int omerrs = 0;

    public void syntax_error(Symbol cur_token) {
        int lineno = action_obj.curr_lineno();
	String filename = action_obj.curr_filename().getString();
        System.err.print("\"" + filename + "\", line " + lineno + 
		         ": parse error at or near ");
        Utilities.printToken(cur_token);
	omerrs++;
	if (omerrs>50) {
	   System.err.println("More than 50 errors");
	   System.exit(1);
	}
    }


    public void unrecovered_syntax_error(Symbol cur_token) {
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$CoolParser$actions {

 

    int curr_lineno() {
	return ((CoolTokenLexer)parser.getScanner()).curr_lineno();
    }

    AbstractSymbol curr_filename() {
	return ((CoolTokenLexer)parser.getScanner()).curr_filename();
    }

  private final CoolParser parser;

  /** Constructor */
  CUP$CoolParser$actions(CoolParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$CoolParser$do_action(
    int                        CUP$CoolParser$act_num,
    java_cup.runtime.lr_parser CUP$CoolParser$parser,
    java.util.Stack            CUP$CoolParser$stack,
    int                        CUP$CoolParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$CoolParser$result;

      /* select the action based on the action number */
      switch (CUP$CoolParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dummy_feature_list ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dummy_feature_list",18, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // features ::= error SEMI 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // features ::= 
            {
              Features RESULT =null;
		 RESULT = new Features(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // features ::= features feature 
            {
              Features RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Features fs = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fs.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // features ::= feature 
            {
              Features RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Feature f = (Feature)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Features(curr_lineno()).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("features",4, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // feature ::= OBJECTID COLON TYPEID ASSIGN expr 
            {
              Feature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		  parser.syntax_error(new Symbol(TokenConstants.OBJECTID, name)); RESULT = new attr(curr_lineno(), name, type, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // feature ::= OBJECTID COLON TYPEID 
            {
              Feature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 parser.syntax_error(new Symbol(TokenConstants.OBJECTID, name)); RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // feature ::= OBJECTID COLON TYPEID ASSIGN expr SEMI 
            {
              Feature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), name, type, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // feature ::= OBJECTID COLON TYPEID SEMI 
            {
              Feature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new attr(curr_lineno(), name, type, new no_expr(curr_lineno())); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // feature ::= OBJECTID LPAREN formals RPAREN COLON TYPEID LBRACE expr RBRACE SEMI 
            {
              Feature RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).right;
		Formals f = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		int retleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol ret = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new method(curr_lineno(), name, f, ret, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("feature",3, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-9)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // block ::= LBRACE blockbody RBRACE 
            {
              block RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions body = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new block(curr_lineno(), body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("block",12, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // blockbody ::= blockbody expr SEMI 
            {
              Expressions RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("blockbody",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // blockbody ::= expr SEMI 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("blockbody",8, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // formals ::= 
            {
              Formals RESULT =null;
		 RESULT = new Formals(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // formals ::= formals COMMA formal 
            {
              Formals RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Formals fs = (Formals)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = fs.appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // formals ::= formal 
            {
              Formals RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		formalc f = (formalc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Formals(curr_lineno())).appendElement(f); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formals",11, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // formal ::= OBJECTID COLON TYPEID 
            {
              formalc RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new formalc(curr_lineno(), id, type); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("formal",10, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exprs ::= exprs expr 
            {
              Expressions RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions es = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = es.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exprs ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("exprs",6, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= error 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new no_expr(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= let 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let l = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = l; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= block 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		block b = (block)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = b; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= dispatch 
            {
              Expression RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression d = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = d; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= while_loop 
            {
              Expression RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		loop w = (loop)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = w; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= ISVOID expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new isvoid(curr_lineno(), e);  
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= NEW TYPEID 
            {
              Expression RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new new_(curr_lineno(), type); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= CASE expr OF branches ESAC 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int casesleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Cases cases = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new typcase(curr_lineno(), e, cases); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= IF expr THEN expr ELSE expr FI 
            {
              Expression RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int then_expleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int then_expright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression then_exp = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int else_expleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int else_expright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression else_exp = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new cond(curr_lineno(), pred, then_exp, else_exp); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= NOT expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new comp(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= expr EQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new eq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr LE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new leq(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr LT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new lt(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= NEG expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new neg(curr_lineno(), e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new divide(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr MULT expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new mul(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new sub(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new plus(curr_lineno(), e1, e2); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= LPAREN expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = e; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= OBJECTID 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new object(curr_lineno(), id); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= BOOL_CONST 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new bool_const(curr_lineno(), b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= STR_CONST 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol s = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new string_const(curr_lineno(), s); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= INT_CONST 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		AbstractSymbol i = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new int_const(curr_lineno(), i); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= OBJECTID ASSIGN expr 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new assign(curr_lineno(), id, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("expr",5, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // while_loop ::= WHILE expr POOL expr LOOP 
            {
              loop RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 parser.syntax_error(new Symbol(TokenConstants.POOL)); RESULT = new loop(curr_lineno(), pred, body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("while_loop",17, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // while_loop ::= WHILE expr POOL expr POOL 
            {
              loop RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 parser.syntax_error(new Symbol(TokenConstants.POOL)); RESULT = new loop(curr_lineno(), pred, body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("while_loop",17, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // while_loop ::= WHILE expr LOOP expr LOOP 
            {
              loop RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 parser.syntax_error(new Symbol(TokenConstants.LOOP)); RESULT = new loop(curr_lineno(), pred, body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("while_loop",17, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // while_loop ::= WHILE expr LOOP expr POOL 
            {
              loop RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		Expression pred = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new loop(curr_lineno(), pred, body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("while_loop",17, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // branches ::= branches branch 
            {
              Cases RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Cases bs = (Cases)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		branch b = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = bs.appendElement(b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branches",16, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // branches ::= branch 
            {
              Cases RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		branch b = (branch)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Cases(curr_lineno()).appendElement(b); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branches",16, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // branch ::= OBJECTID COLON TYPEID DARROW expr SEMI 
            {
              branch RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol t = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new branch(curr_lineno(), id, t, e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("branch",15, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // let ::= LET lethelper 
            {
              let RESULT =null;
		int helperleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int helperright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let helper = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = helper; 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("let",13, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // lethelper ::= OBJECTID COLON TYPEID COMMA lethelper 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int helperleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int helperright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let helper = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), helper); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("lethelper",14, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // lethelper ::= OBJECTID COLON TYPEID ASSIGN expr COMMA lethelper 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int helperleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int helperright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		let helper = (let)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), name, type, init, helper); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("lethelper",14, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lethelper ::= OBJECTID COLON TYPEID IN expr 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), name, type, new no_expr(curr_lineno()), body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("lethelper",14, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lethelper ::= OBJECTID COLON TYPEID ASSIGN expr IN expr 
            {
              let RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol name = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expression init = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new let(curr_lineno(), name, type, init, body); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("lethelper",14, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // dispatch ::= expr AT TYPEID DOT OBJECTID LPAREN args RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		AbstractSymbol type = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions arg = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new static_dispatch(curr_lineno(), e, type, id, arg); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dispatch",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // dispatch ::= OBJECTID LPAREN args RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions arg = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(),new object(curr_lineno(), TreeConstants.self), id, arg); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dispatch",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dispatch ::= expr DOT OBJECTID LPAREN args RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).right;
		AbstractSymbol id = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Expressions arg = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		 RESULT = new dispatch(curr_lineno(), e, id, arg); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("dispatch",9, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // args ::= 
            {
              Expressions RESULT =null;
		 RESULT = new Expressions(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // args ::= args COMMA expr 
            {
              Expressions RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Expressions arg = (Expressions)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = arg.appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // args ::= expr 
            {
              Expressions RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new Expressions(curr_lineno()).appendElement(e); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("args",7, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // class ::= CLASS TYPEID INHERITS TYPEID LBRACE features RBRACE SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol p = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		 RESULT = new class_c(curr_lineno(), n, p, f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-7)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class ::= CLASS TYPEID LBRACE features RBRACE SEMI 
            {
              class_c RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).right;
		AbstractSymbol n = (AbstractSymbol)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).right;
		Features f = (Features)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-2)).value;
		  RESULT = new class_c(curr_lineno(), n, 
		                   AbstractTable.idtable.addString("Object"), 
				   f, curr_filename()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class",2, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-5)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // class_list ::= error class 
            {
              Classes RESULT =null;
		 RESULT = new Classes(curr_lineno()); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= class_list class 
            {
              Classes RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = cl.appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class 
            {
              Classes RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		class_c c = (class_c)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = (new Classes(curr_lineno())).appendElement(c); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).right;
		programc start_val = (programc)((java_cup.runtime.Symbol) CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)).value;
		RESULT = start_val;
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.elementAt(CUP$CoolParser$top-1)), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$CoolParser$parser.done_parsing();
          return CUP$CoolParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              programc RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()).right;
		Classes cl = (Classes)((java_cup.runtime.Symbol) CUP$CoolParser$stack.peek()).value;
		 RESULT = new programc(curr_lineno(), cl); 
              CUP$CoolParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$CoolParser$stack.peek()), RESULT);
            }
          return CUP$CoolParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

